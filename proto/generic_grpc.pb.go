// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/generic.proto

package gateway

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GenericService_HandleStream_FullMethodName = "/gateway.GenericService/HandleStream"
)

// GenericServiceClient is the client API for GenericService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Define a streaming service
type GenericServiceClient interface {
	HandleStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[GenericRequest, GenericResponse], error)
}

type genericServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGenericServiceClient(cc grpc.ClientConnInterface) GenericServiceClient {
	return &genericServiceClient{cc}
}

func (c *genericServiceClient) HandleStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[GenericRequest, GenericResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GenericService_ServiceDesc.Streams[0], GenericService_HandleStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GenericRequest, GenericResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GenericService_HandleStreamClient = grpc.BidiStreamingClient[GenericRequest, GenericResponse]

// GenericServiceServer is the server API for GenericService service.
// All implementations must embed UnimplementedGenericServiceServer
// for forward compatibility.
//
// Define a streaming service
type GenericServiceServer interface {
	HandleStream(grpc.BidiStreamingServer[GenericRequest, GenericResponse]) error
	mustEmbedUnimplementedGenericServiceServer()
}

// UnimplementedGenericServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGenericServiceServer struct{}

func (UnimplementedGenericServiceServer) HandleStream(grpc.BidiStreamingServer[GenericRequest, GenericResponse]) error {
	return status.Errorf(codes.Unimplemented, "method HandleStream not implemented")
}
func (UnimplementedGenericServiceServer) mustEmbedUnimplementedGenericServiceServer() {}
func (UnimplementedGenericServiceServer) testEmbeddedByValue()                        {}

// UnsafeGenericServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GenericServiceServer will
// result in compilation errors.
type UnsafeGenericServiceServer interface {
	mustEmbedUnimplementedGenericServiceServer()
}

func RegisterGenericServiceServer(s grpc.ServiceRegistrar, srv GenericServiceServer) {
	// If the following call pancis, it indicates UnimplementedGenericServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GenericService_ServiceDesc, srv)
}

func _GenericService_HandleStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GenericServiceServer).HandleStream(&grpc.GenericServerStream[GenericRequest, GenericResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GenericService_HandleStreamServer = grpc.BidiStreamingServer[GenericRequest, GenericResponse]

// GenericService_ServiceDesc is the grpc.ServiceDesc for GenericService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GenericService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gateway.GenericService",
	HandlerType: (*GenericServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HandleStream",
			Handler:       _GenericService_HandleStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/generic.proto",
}
